{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WebBTC A common convention in the Bitcoin web application ecosystem is for key management software (\u201cwallets\u201d) to expose their API via a JavaScript object in the web page. This object is called the common web wallet interface. Historically, Provider implementations have exhibited conflicting interfaces and behaviors between wallets. This working group formalizes an Bitcoin extension API to promote wallet interoperability. The API is designed to be minimal, event-driven, and agnostic of transport and RPC protocols. Its functionality is easily extended by defining new RPC methods and message event types. Historically, providers have been made available as window.bitcoin or window.webln in web browsers, but this convention is not part of the specification. A list of current work in progress can be tracked from the issues tab in the playground repository , which includes a functional spec demonstration. A hosted instance of the demo can be found here together with the accompanying specification documentation .","title":"Overview"},{"location":"#webbtc","text":"A common convention in the Bitcoin web application ecosystem is for key management software (\u201cwallets\u201d) to expose their API via a JavaScript object in the web page. This object is called the common web wallet interface. Historically, Provider implementations have exhibited conflicting interfaces and behaviors between wallets. This working group formalizes an Bitcoin extension API to promote wallet interoperability. The API is designed to be minimal, event-driven, and agnostic of transport and RPC protocols. Its functionality is easily extended by defining new RPC methods and message event types. Historically, providers have been made available as window.bitcoin or window.webln in web browsers, but this convention is not part of the specification. A list of current work in progress can be tracked from the issues tab in the playground repository , which includes a functional spec demonstration. A hosted instance of the demo can be found here together with the accompanying specification documentation .","title":"WebBTC"},{"location":"authentication/","text":"","title":"Authentication"},{"location":"enable/","text":"Enable Wallet The enable method is called to allow access to further API methods from the wallet. Syntax enable() Parameters None Returns Object enabled : Boolean Required addresses : AddressObjArray Optional address: String derivationPath: String publicKey: String NOTE: The AddressObjArray here can be returned for Onchain wallets but can also be used ny WebLN wallets which also expose the onchain wallet functions. This typically is used to show that a wallet is connected to the page. Example // Enable wallet window.webbtc.enable() { address: { address: \"bc1q9zw3q496dcx2qu5pvhvg0zwfsxgj79nhh5rqct\" derivationPath: \"84'/0'/0'/0/0\" publicKey: \"031ecb71f390fcffc8727bedc5fb563e7bf90cd9725b1519e1ef74a16ca7a30fe3\" }, success: true } // Check if the wallet is enabled window.webbtc.enabled true // Check if wallet is enabled, invoke enable when false if (!window.webbtc.enabled) window.webbtc.enable() Notes Application specific on wether or not to trust once or always. On invoking the enable call the application developer provides an interface which may or may not prompt the user to accept the request.","title":"Enabling"},{"location":"enable/#enable-wallet","text":"The enable method is called to allow access to further API methods from the wallet.","title":"Enable Wallet"},{"location":"enable/#syntax","text":"enable()","title":"Syntax"},{"location":"enable/#parameters","text":"None","title":"Parameters"},{"location":"enable/#returns","text":"Object enabled : Boolean Required addresses : AddressObjArray Optional address: String derivationPath: String publicKey: String NOTE: The AddressObjArray here can be returned for Onchain wallets but can also be used ny WebLN wallets which also expose the onchain wallet functions. This typically is used to show that a wallet is connected to the page.","title":"Returns"},{"location":"enable/#example","text":"// Enable wallet window.webbtc.enable() { address: { address: \"bc1q9zw3q496dcx2qu5pvhvg0zwfsxgj79nhh5rqct\" derivationPath: \"84'/0'/0'/0/0\" publicKey: \"031ecb71f390fcffc8727bedc5fb563e7bf90cd9725b1519e1ef74a16ca7a30fe3\" }, success: true } // Check if the wallet is enabled window.webbtc.enabled true // Check if wallet is enabled, invoke enable when false if (!window.webbtc.enabled) window.webbtc.enable()","title":"Example"},{"location":"enable/#notes","text":"Application specific on wether or not to trust once or always. On invoking the enable call the application developer provides an interface which may or may not prompt the user to accept the request.","title":"Notes"},{"location":"getting_started/","text":"Getting Started","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"info/","text":"Get wallet information The getInfo method is called to obtain supported features and capabilities of the wallet. Syntax getInfo() Parameters None Returns Object version : Number | String Required methods : Array Optional supports : Array Optional Example window.webbtc.getInfo() { \"version\" : 1, \"supports\" : [ \"bip39\", \"bip32\" ], \"methods\": [ // schema for available methods \"enable\", \"getInfo\", \"getAddress\", \"signMessage\", \"verifyMessage\", \"makeInvoice\", \"sendPayment\" ] } Additional notes The above method might be extended to include helper methods which include. window.webbtc.getMethods() window.webbtc.getVersion() window.webbtc.getServices() NOTE: Method for obtaining existing supported permissions that the user could approve when enabling the wallet. Application specific implementation details can vary based on the security preference. Concerns and security observations Possible finger printing of users if this method is accessible without enabling it first.","title":"info"},{"location":"info/#get-wallet-information","text":"The getInfo method is called to obtain supported features and capabilities of the wallet.","title":"Get wallet information"},{"location":"info/#syntax","text":"getInfo()","title":"Syntax"},{"location":"info/#parameters","text":"None","title":"Parameters"},{"location":"info/#returns","text":"Object version : Number | String Required methods : Array Optional supports : Array Optional","title":"Returns"},{"location":"info/#example","text":"window.webbtc.getInfo() { \"version\" : 1, \"supports\" : [ \"bip39\", \"bip32\" ], \"methods\": [ // schema for available methods \"enable\", \"getInfo\", \"getAddress\", \"signMessage\", \"verifyMessage\", \"makeInvoice\", \"sendPayment\" ] }","title":"Example"},{"location":"info/#additional-notes","text":"The above method might be extended to include helper methods which include. window.webbtc.getMethods() window.webbtc.getVersion() window.webbtc.getServices() NOTE: Method for obtaining existing supported permissions that the user could approve when enabling the wallet. Application specific implementation details can vary based on the security preference.","title":"Additional notes"},{"location":"info/#concerns-and-security-observations","text":"Possible finger printing of users if this method is accessible without enabling it first.","title":"Concerns and security observations"},{"location":"permissions/","text":"","title":"Permissions"},{"location":"references/","text":"References Spec Demo Onchain Wallet Documentation A WebLN playground WebLN Documentation WebLN Guide","title":"Resources"},{"location":"references/#references","text":"Spec Demo Onchain Wallet Documentation A WebLN playground WebLN Documentation WebLN Guide","title":"References"},{"location":"services/","text":"Services","title":"Services"},{"location":"services/#services","text":"","title":"Services"},{"location":"squatting/","text":"Extension namespace squatting Historically, providers have been made available as window.bitcoin or window.webln in web browsers, but this convention is not part of the specification.","title":"Namespace Squatting"},{"location":"squatting/#extension-namespace-squatting","text":"Historically, providers have been made available as window.bitcoin or window.webln in web browsers, but this convention is not part of the specification.","title":"Extension namespace squatting"},{"location":"addresses/getAddress/","text":"Get addresses from wallet The getAddresses method is called to obtain an onchain address from the wallet. NOTE: WebLN implementations might choose to implement this method when exposing access to the onchain wallet. Syntax getAddresses(index?, num?, change?) Parameters index: Number (default 0) - Which index to start from Optional num: Number (default 1) - Number of addresses to retrieve Optional change: Boolean (default false) - true for change addresses, false for external Optional Returns AddressObjectArray - An array of bitcoin address objects Required address: String - Bitcoin address Required derivationPath: String - Derivation path of the address e.g. \"84'/1'/0'/0/0\" Optional publicKey: String(Hex) - The public key for the derivation path Optional index: Number - Index of the address Optional Example await window.webbtc.getAddresses(0, 10, false) [{ address: \"tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2\", derivationPath: \"84'/1'/0'/0/0\", publicKey: { \u2026}, index: 0 } { address: \"tb1qca6k2ke5jdrwmdqcku4eex4k9hzzzhzshhsgpn\", derivationPath: \"84'/1'/0'/0/1\", publicKey: { \u2026}, index: 1 } { address: \"tb1q6e36gyc8vhv97k9m2uldndsl8xg80yd49mhqpx\", derivationPath: \"84'/1'/0'/0/2\", publicKey: { \u2026}, index: 2 } { address: \"tb1qvphc32p0qxl2fm89r04epmtxvdt7l7dl5a955c\", derivationPath: \"84'/1'/0'/0/3\", publicKey: { \u2026}, index: 3 } { address: \"tb1qxm90ahvjnut9d7mw8d0r22czldnu3kqyef55nn\", derivationPath: \"84'/1'/0'/0/4\", publicKey: { \u2026}, index: 4 } { address: \"tb1q8wjjk4gu3am2tjg833qulqt69ny8e24vt8ccj6\", derivationPath: \"84'/1'/0'/0/5\", publicKey: { \u2026}, index: 5 } { address: \"tb1q7jkkn80maps9z068u22jrpv65t9epjlrl4zpzj\", derivationPath: \"84'/1'/0'/0/6\", publicKey: { \u2026}, index: 6 } { address: \"tb1qrzpw5rrm9w8qf3v3y43av3npeqhgp9lng5xtyk\", derivationPath: \"84'/1'/0'/0/7\", publicKey: { \u2026}, index: 7 } { address: \"tb1q9vu3j2m6u48sv53g7e24lfx2c9mavv0ee6wr02\", derivationPath: \"84'/1'/0'/0/8\", publicKey: { \u2026}, index: 8 } { address: \"tb1q0m2f0vjc4njy5d0vzmlwre8jdtar9x9w7nz9jg\", derivationPath: \"84'/1'/0'/0/9\", publicKey: { \u2026}, index: 9 }] Notes Implemented for on-chain, might however not be supported by off-chain wallets","title":"getAddress"},{"location":"addresses/getAddress/#get-addresses-from-wallet","text":"The getAddresses method is called to obtain an onchain address from the wallet. NOTE: WebLN implementations might choose to implement this method when exposing access to the onchain wallet.","title":"Get addresses from wallet"},{"location":"addresses/getAddress/#syntax","text":"getAddresses(index?, num?, change?)","title":"Syntax"},{"location":"addresses/getAddress/#parameters","text":"index: Number (default 0) - Which index to start from Optional num: Number (default 1) - Number of addresses to retrieve Optional change: Boolean (default false) - true for change addresses, false for external Optional","title":"Parameters"},{"location":"addresses/getAddress/#returns","text":"AddressObjectArray - An array of bitcoin address objects Required address: String - Bitcoin address Required derivationPath: String - Derivation path of the address e.g. \"84'/1'/0'/0/0\" Optional publicKey: String(Hex) - The public key for the derivation path Optional index: Number - Index of the address Optional","title":"Returns"},{"location":"addresses/getAddress/#example","text":"await window.webbtc.getAddresses(0, 10, false) [{ address: \"tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2\", derivationPath: \"84'/1'/0'/0/0\", publicKey: { \u2026}, index: 0 } { address: \"tb1qca6k2ke5jdrwmdqcku4eex4k9hzzzhzshhsgpn\", derivationPath: \"84'/1'/0'/0/1\", publicKey: { \u2026}, index: 1 } { address: \"tb1q6e36gyc8vhv97k9m2uldndsl8xg80yd49mhqpx\", derivationPath: \"84'/1'/0'/0/2\", publicKey: { \u2026}, index: 2 } { address: \"tb1qvphc32p0qxl2fm89r04epmtxvdt7l7dl5a955c\", derivationPath: \"84'/1'/0'/0/3\", publicKey: { \u2026}, index: 3 } { address: \"tb1qxm90ahvjnut9d7mw8d0r22czldnu3kqyef55nn\", derivationPath: \"84'/1'/0'/0/4\", publicKey: { \u2026}, index: 4 } { address: \"tb1q8wjjk4gu3am2tjg833qulqt69ny8e24vt8ccj6\", derivationPath: \"84'/1'/0'/0/5\", publicKey: { \u2026}, index: 5 } { address: \"tb1q7jkkn80maps9z068u22jrpv65t9epjlrl4zpzj\", derivationPath: \"84'/1'/0'/0/6\", publicKey: { \u2026}, index: 6 } { address: \"tb1qrzpw5rrm9w8qf3v3y43av3npeqhgp9lng5xtyk\", derivationPath: \"84'/1'/0'/0/7\", publicKey: { \u2026}, index: 7 } { address: \"tb1q9vu3j2m6u48sv53g7e24lfx2c9mavv0ee6wr02\", derivationPath: \"84'/1'/0'/0/8\", publicKey: { \u2026}, index: 8 } { address: \"tb1q0m2f0vjc4njy5d0vzmlwre8jdtar9x9w7nz9jg\", derivationPath: \"84'/1'/0'/0/9\", publicKey: { \u2026}, index: 9 }]","title":"Example"},{"location":"addresses/getAddress/#notes","text":"Implemented for on-chain, might however not be supported by off-chain wallets","title":"Notes"},{"location":"extendability/extending/","text":"Extendability There is room for extending this API through a request method. This method might also be useful as a base from which all the other methods in the specification might have wrapper methods. Syntax window.webbtc.request(method, params) Parameters method: String Required params: Array Required Returns Promise | Object NOTE: This call might be asynchronous is would return a promise based on wether or not the payment has been broadcast Onchain and or processed successfully Example // Example of calling an existing method window.webbtc.request('getInfo',[]) { \"version\" : 1, \"supports\" : [ \"bip39\", \"bip32\" ], \"methods\": [ // schema for available methods \"enable\", \"getInfo\", \"getAddress\", \"signMessage\", \"verifyMessage\", \"makeInvoice\", \"sendPayment\" ] } // Example for calling an arbitrary message not covered in the specification // Custom method might be // hello(name) { // return \"Hello ${name}\" //} > await window.webbtc.request('hello',['Alice']) Hello Alice","title":"Extending"},{"location":"extendability/extending/#extendability","text":"There is room for extending this API through a request method. This method might also be useful as a base from which all the other methods in the specification might have wrapper methods.","title":"Extendability"},{"location":"extendability/extending/#syntax","text":"window.webbtc.request(method, params)","title":"Syntax"},{"location":"extendability/extending/#parameters","text":"method: String Required params: Array Required","title":"Parameters"},{"location":"extendability/extending/#returns","text":"Promise | Object NOTE: This call might be asynchronous is would return a promise based on wether or not the payment has been broadcast Onchain and or processed successfully","title":"Returns"},{"location":"extendability/extending/#example","text":"// Example of calling an existing method window.webbtc.request('getInfo',[]) { \"version\" : 1, \"supports\" : [ \"bip39\", \"bip32\" ], \"methods\": [ // schema for available methods \"enable\", \"getInfo\", \"getAddress\", \"signMessage\", \"verifyMessage\", \"makeInvoice\", \"sendPayment\" ] } // Example for calling an arbitrary message not covered in the specification // Custom method might be // hello(name) { // return \"Hello ${name}\" //} > await window.webbtc.request('hello',['Alice']) Hello Alice","title":"Example"},{"location":"invoices/makeInvoice/","text":"Create a new invoice The makeInvoice method is used to generate a new invoice. Syntax makeInvoice(Object) Parameters Object amount : string | number Optional defaultMemo : string Optional label : string Optional message : string Optional NOTE: Providing any of the above would result in a pre-populating a a prompt which requires the user to complete the rest of the information. e.g. Only providing the amount parameter might result in the following prompt. Returns Object paymentRequest: string; LN Invoice BIP21 address string; Onchain BIP 21 URI Example await window.webln.makeInvoice({}) { paymentRequest: 'lnbc10n1p3x9thxpp59xj4cmm26jnpnrfekgncyj42e9lxredz\u2026734s07kxt8hl2s6wuv20kh7kw7h5lurtmyscsrwgkgptn4z2j', rHash: '29a55c6f6ad4a6198d39b227824aaac97e61e5a2428db7dab7f8b097ae5d28ca' } window.bitcoin.makeInvoice({amount:1, label: 'Label', message: 'Message'}) bitcoin:address?amount=0&label=Label&message=Message Considerations These parameters might not be required in the spec as they are used by the website for convenience purposes in setting up the invoice dialog. defaultAmount?: string | number; minimumAmount?: string | number; maximumAmount?: string | number; Notes The amount parameter doesn't distinguish between bitcoin and satoshis Reference https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki bitcoinurn = \"bitcoin:\" bitcoinaddress [ \"?\" bitcoinparams ] bitcoinaddress = *base58 bitcoinparams = bitcoinparam [ \"&\" bitcoinparams ] bitcoinparam = [ amountparam / labelparam / messageparam / otherparam / reqparam ] amountparam = \"amount=\" *digit [ \".\" *digit ] labelparam = \"label=\" *qchar messageparam = \"message=\" *qchar otherparam = qchar *qchar [ \"=\" *qchar ] reqparam = \"req-\" qchar *qchar [ \"=\" *qchar ] Invoice address description Invoice Address Meno proposal Payment Requests Separate Meno into name and description Label = The who Message = The what","title":"makeInvoice"},{"location":"invoices/makeInvoice/#create-a-new-invoice","text":"The makeInvoice method is used to generate a new invoice.","title":"Create a new invoice"},{"location":"invoices/makeInvoice/#syntax","text":"makeInvoice(Object)","title":"Syntax"},{"location":"invoices/makeInvoice/#parameters","text":"Object amount : string | number Optional defaultMemo : string Optional label : string Optional message : string Optional NOTE: Providing any of the above would result in a pre-populating a a prompt which requires the user to complete the rest of the information. e.g. Only providing the amount parameter might result in the following prompt.","title":"Parameters"},{"location":"invoices/makeInvoice/#returns","text":"Object paymentRequest: string; LN Invoice BIP21 address string; Onchain BIP 21 URI","title":"Returns"},{"location":"invoices/makeInvoice/#example","text":"await window.webln.makeInvoice({}) { paymentRequest: 'lnbc10n1p3x9thxpp59xj4cmm26jnpnrfekgncyj42e9lxredz\u2026734s07kxt8hl2s6wuv20kh7kw7h5lurtmyscsrwgkgptn4z2j', rHash: '29a55c6f6ad4a6198d39b227824aaac97e61e5a2428db7dab7f8b097ae5d28ca' } window.bitcoin.makeInvoice({amount:1, label: 'Label', message: 'Message'}) bitcoin:address?amount=0&label=Label&message=Message","title":"Example"},{"location":"invoices/makeInvoice/#considerations","text":"These parameters might not be required in the spec as they are used by the website for convenience purposes in setting up the invoice dialog. defaultAmount?: string | number; minimumAmount?: string | number; maximumAmount?: string | number;","title":"Considerations"},{"location":"invoices/makeInvoice/#notes","text":"The amount parameter doesn't distinguish between bitcoin and satoshis","title":"Notes"},{"location":"invoices/makeInvoice/#reference","text":"https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki bitcoinurn = \"bitcoin:\" bitcoinaddress [ \"?\" bitcoinparams ] bitcoinaddress = *base58 bitcoinparams = bitcoinparam [ \"&\" bitcoinparams ] bitcoinparam = [ amountparam / labelparam / messageparam / otherparam / reqparam ] amountparam = \"amount=\" *digit [ \".\" *digit ] labelparam = \"label=\" *qchar messageparam = \"message=\" *qchar otherparam = qchar *qchar [ \"=\" *qchar ] reqparam = \"req-\" qchar *qchar [ \"=\" *qchar ]","title":"Reference"},{"location":"invoices/makeInvoice/#invoice-address-description","text":"Invoice Address Meno proposal Payment Requests Separate Meno into name and description Label = The who Message = The what","title":"Invoice address description"},{"location":"signatures/sign/","text":"Sign Message The signMessage method is used to sign arbitrary data and produce a signature which can be used to verify ownership of a key. Syntax signMessage(message, address?) Parameters Object message: String - The message to sign Required address: Object Option NOTE: The second parameter here is typically required for onchain wallets but can be omitted if the wallet contains internal support for automatic key selection. In the event of LND or C-Lightning, the wallet may use a root key whereas onchain wallets require to provide the address derived from the key required for signing the message. Returns Signature: String Required Example > await window.wallet.signMessage('Better with code than with words', 'tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2') \"2047ab7b010687146ef9d69648cbdc4610b7ebaf6f21d7255f2113fe87b24d4b4264eef980d21f29d3ba81b369e41bf532b1292021af16c6773187c34d090b7efb\" References WebLN examples https://api.lightning.community/#chainrpc-spendrequest BIPS https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki C-lightning https://lightning.readthedocs.io/lightning-signmessage.7.html","title":"Signing"},{"location":"signatures/sign/#sign-message","text":"The signMessage method is used to sign arbitrary data and produce a signature which can be used to verify ownership of a key.","title":"Sign Message"},{"location":"signatures/sign/#syntax","text":"signMessage(message, address?)","title":"Syntax"},{"location":"signatures/sign/#parameters","text":"Object message: String - The message to sign Required address: Object Option NOTE: The second parameter here is typically required for onchain wallets but can be omitted if the wallet contains internal support for automatic key selection. In the event of LND or C-Lightning, the wallet may use a root key whereas onchain wallets require to provide the address derived from the key required for signing the message.","title":"Parameters"},{"location":"signatures/sign/#returns","text":"Signature: String Required","title":"Returns"},{"location":"signatures/sign/#example","text":"> await window.wallet.signMessage('Better with code than with words', 'tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2') \"2047ab7b010687146ef9d69648cbdc4610b7ebaf6f21d7255f2113fe87b24d4b4264eef980d21f29d3ba81b369e41bf532b1292021af16c6773187c34d090b7efb\"","title":"Example"},{"location":"signatures/sign/#references","text":"","title":"References"},{"location":"signatures/sign/#webln-examples","text":"https://api.lightning.community/#chainrpc-spendrequest","title":"WebLN examples"},{"location":"signatures/sign/#bips","text":"https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki","title":"BIPS"},{"location":"signatures/sign/#c-lightning","text":"https://lightning.readthedocs.io/lightning-signmessage.7.html","title":"C-lightning"},{"location":"signatures/verify/","text":"Verify Message Signature The verifyMessage method is used to verify the signature of a arbitrary message. Syntax verifyMessage(signature, address?) Parameters Object signature: String (Hex) - The message to sign address: String - The used to sign the message NOTE: The second parameter here is typically required for onchain wallets but can be omitted if the wallet contains internal support for automatic key selection. In the event of LND or C-Lightning, the wallet may use a root key whereas onchain wallets require to provide the address derived from the key required for signing the message. Returns Boolean - Is valid signature Example > await window.webbtc.verifyMessage('2047ab7b010687146ef9d69648cbdc4610b7ebaf6f21d7255f2113fe87b24d4b4264eef980d21f29d3ba81b369e41bf532b1292021af16c6773187c34d090b7efb', 'tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2') true References VerifyMessage LND lightning-checkmessage C-lightning Bitcoin Core Signatures of Messages using Private Keys- BIP137 Generic Signed Message Format BIP322","title":"Verification"},{"location":"signatures/verify/#verify-message-signature","text":"The verifyMessage method is used to verify the signature of a arbitrary message.","title":"Verify Message Signature"},{"location":"signatures/verify/#syntax","text":"verifyMessage(signature, address?)","title":"Syntax"},{"location":"signatures/verify/#parameters","text":"Object signature: String (Hex) - The message to sign address: String - The used to sign the message NOTE: The second parameter here is typically required for onchain wallets but can be omitted if the wallet contains internal support for automatic key selection. In the event of LND or C-Lightning, the wallet may use a root key whereas onchain wallets require to provide the address derived from the key required for signing the message.","title":"Parameters"},{"location":"signatures/verify/#returns","text":"Boolean - Is valid signature","title":"Returns"},{"location":"signatures/verify/#example","text":"> await window.webbtc.verifyMessage('2047ab7b010687146ef9d69648cbdc4610b7ebaf6f21d7255f2113fe87b24d4b4264eef980d21f29d3ba81b369e41bf532b1292021af16c6773187c34d090b7efb', 'tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2') true","title":"Example"},{"location":"signatures/verify/#references","text":"VerifyMessage LND lightning-checkmessage C-lightning Bitcoin Core Signatures of Messages using Private Keys- BIP137 Generic Signed Message Format BIP322","title":"References"},{"location":"transactions/send/","text":"Send Payment The sendPayment method is called to pay an lightning invoice or BIP21 URI. Syntax sendPayment(String) Parameters bip21 url : string or paymentRequest: string Required Returns Promise NOTE: This call is asynchronous is would return a promise based on wether or not the payment has been broadcast Onchain and or processed successfully WebLN . Example // Example for processing a BIP21 URI Invoice > await window.webbtc.sendPayment('bitcoin:n1nk1j5DKmmWWuV2TvzhUb3AYBtnqAK1u1?amount=1') { \"txid\":\"ba8d75e01ab32932d9ac899418a6bec95f2869e1b1c161b871f661c5a8789a0e\" } // Example for processing a LN payment window.webbtc.sendPayment('lnbc10n1p3x9thxpp59xj4cmm26jnpnrfekgncyj42e9lxredz\u2026734s07kxt8hl2s6wuv20kh7kw7h5lurtmyscsrwgkgptn4z2j') { \"preimage\": \"6665333431626331363632653134386630643435626532626165383332323333\", \"paymentHash\": \"d221b791c7ef1996b25424ff7cfb4ddf8d4444076666ce6c4ba0f6a24d99117e\" } Notes The purpose of this method includes both signing as well as broadcasting the transaction. The implementation details of this could be done as separate concerns. There are more complex versions for onchain including PSBT, pay multiple addresses at the same time.","title":"sendPayment"},{"location":"transactions/send/#send-payment","text":"The sendPayment method is called to pay an lightning invoice or BIP21 URI.","title":"Send Payment"},{"location":"transactions/send/#syntax","text":"sendPayment(String)","title":"Syntax"},{"location":"transactions/send/#parameters","text":"bip21 url : string or paymentRequest: string Required","title":"Parameters"},{"location":"transactions/send/#returns","text":"Promise NOTE: This call is asynchronous is would return a promise based on wether or not the payment has been broadcast Onchain and or processed successfully WebLN .","title":"Returns"},{"location":"transactions/send/#example","text":"// Example for processing a BIP21 URI Invoice > await window.webbtc.sendPayment('bitcoin:n1nk1j5DKmmWWuV2TvzhUb3AYBtnqAK1u1?amount=1') { \"txid\":\"ba8d75e01ab32932d9ac899418a6bec95f2869e1b1c161b871f661c5a8789a0e\" } // Example for processing a LN payment window.webbtc.sendPayment('lnbc10n1p3x9thxpp59xj4cmm26jnpnrfekgncyj42e9lxredz\u2026734s07kxt8hl2s6wuv20kh7kw7h5lurtmyscsrwgkgptn4z2j') { \"preimage\": \"6665333431626331363632653134386630643435626532626165383332323333\", \"paymentHash\": \"d221b791c7ef1996b25424ff7cfb4ddf8d4444076666ce6c4ba0f6a24d99117e\" }","title":"Example"},{"location":"transactions/send/#notes","text":"The purpose of this method includes both signing as well as broadcasting the transaction. The implementation details of this could be done as separate concerns. There are more complex versions for onchain including PSBT, pay multiple addresses at the same time.","title":"Notes"},{"location":"transactions/sendTransaction/","text":"Send transaction The sendTransaction method is called to make an onchain payment. Syntax sendTransaction(String) Parameters address: String Required amount: String Required Returns txid: String Example window.bitcoin.sendTransaction('tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2', 10000) \"ba8d75e01ab32932d9ac899418a6bec95f2869e1b1c161b871f661c5a8789a0e\" } Notes The purpose of this method includes both signing as well as broadcasting the transaction. The implementation details of this could be done as separate concerns. There are more complex versions for onchain including PSBT, pay multiple addresses at the same time.","title":"sendTransaction"},{"location":"transactions/sendTransaction/#send-transaction","text":"The sendTransaction method is called to make an onchain payment.","title":"Send transaction"},{"location":"transactions/sendTransaction/#syntax","text":"sendTransaction(String)","title":"Syntax"},{"location":"transactions/sendTransaction/#parameters","text":"address: String Required amount: String Required","title":"Parameters"},{"location":"transactions/sendTransaction/#returns","text":"txid: String","title":"Returns"},{"location":"transactions/sendTransaction/#example","text":"window.bitcoin.sendTransaction('tb1qqwn2dp8mundc6mf3xt4c8puqakk0vrcgzdayq2', 10000) \"ba8d75e01ab32932d9ac899418a6bec95f2869e1b1c161b871f661c5a8789a0e\" }","title":"Example"},{"location":"transactions/sendTransaction/#notes","text":"The purpose of this method includes both signing as well as broadcasting the transaction. The implementation details of this could be done as separate concerns. There are more complex versions for onchain including PSBT, pay multiple addresses at the same time.","title":"Notes"}]}